#!/usr/bin/env ruby

# frozen_string_literal: true

require 'optparse'
require 'json'

require 'hackers'
require 'sandbox'
require 'cli/sandbox'

BASE_DIR = File.join(__dir__, '..')
DATA_DIR = File.join(BASE_DIR, 'data')

Dir.chdir(BASE_DIR)
CONFIGS_DIR = 'configs'
DEFAULT_CONFIG = 'default'
CONFIG_EXT = '.conf'

COUNTRIES_FILE = 'countries.conf'

BANNER = <<~BANNER_TEXT
  Trickster Arts Hackers sandbox
BANNER_TEXT

options = {
  config: DEFAULT_CONFIG
}

option_parser = OptionParser.new do |opts|
  opts.banner = BANNER

  opts.on('-c config', '', 'Run with the config') do |v|
    options[:config] = v
  end

  opts.on('-a', '', 'Disable execution of the auto commands') do |v|
    options[:auto] = v
  end

  opts.on('-l', '', 'List configs') do |v|
    options[:list] = v
  end

  opts.on('-n config', '', 'Create a new account with the config') do |v|
    options[:new] = v
  end

  opts.on('-d config', '', 'Delete the config') do |v|
    options[:delete] = v
  end
end

begin
  option_parser.parse!
rescue OptionParser::InvalidOption, OptionParser::MissingArgument => e
  puts(e)
  exit
end

if options.key?(:list)
  files = Dir.children(CONFIGS_DIR)
  files = files.select { |f| f.end_with?(CONFIG_EXT) }
  files.map! { |f| f.delete_suffix(CONFIG_EXT) }
  files.sort! { |a, b| a <=> b }
  files.each { |f| puts(f) }
  exit
end

if options.key?(:new)
  config_file = File.join(CONFIGS_DIR, "#{options[:new]}#{CONFIG_EXT}")
  if File.file?(config_file)
    puts("Config #{options[:new]} already exists")
    exit
  end

  config = Sandbox::Config.new(File.join(CONFIGS_DIR, "#{DEFAULT_CONFIG}#{CONFIG_EXT}"))
  config.load
  config.file = config_file
  game = Hackers::Game.new(config)
  account = game.create_player
  config['id'] = account.id
  config['password'] = account.password
  config.save
  puts("New account #{options[:new]} has been created (#{account['id']})")
  exit
end

if options.key?(:delete)
  config_file = File.join(CONFIGS_DIR, "#{options[:delete]}#{CONFIG_EXT}")
  unless File.file?(config_file)
    puts("Config #{options[:delete]} doesn't exist")
    exit
  end

  File.unlink(config_file)
  puts("Config #{options[:delete]} has been deleted")
  exit
end

config_file = File.join(CONFIGS_DIR, "#{options[:config]}#{CONFIG_EXT}")
unless File.file?(config_file)
  puts("Config #{options[:config]} doesn't exist")
  exit
end

config = Sandbox::Config.new(config_file)
begin
  config.load
rescue JSON::ParserError => e
  puts("Format of the config #{options[:config]} is invalid")
  puts
  puts(e)
  exit
end

GAME = Hackers::Game.new(config)
GAME.countries_list.raw_data = File.read(File.join(DATA_DIR, COUNTRIES_FILE))
GAME.countries_list.load

SHELL = Sandbox::Shell.new(
  prompt: ColorTerm.magenta.bold(" \u25b8 "),
  banner: BANNER
)

LOGGER = Sandbox::Logger.new(SHELL)
LOGGER.log_prefix = "\u2714 "
LOGGER.log_prefix_cterm = ColorTerm.green.bold
LOGGER.log_cterm = ColorTerm.green
LOGGER.error_prefix = "\u2718 "
LOGGER.error_prefix_cterm = ColorTerm.red.bold
LOGGER.error_cterm = ColorTerm.red
LOGGER.info_prefix = "\u2759 "
LOGGER.info_prefix_cterm = ColorTerm.white.bold
LOGGER.info_cterm = ColorTerm.white

require 'cli'

begin
  if config.key?('autocmd') && !options.key?(:auto)
    if config['autocmd'].instance_of?(Array)
      config['autocmd'].each { |cmd| SHELL.exec(cmd) }
    else
      SHELL.exec(config['autocmd'].to_s)
    end
  end
rescue Interrupt
  exit
end

SHELL.run
